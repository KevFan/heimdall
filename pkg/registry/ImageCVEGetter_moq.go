// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registry

import (
	"github.com/integr8ly/heimdall/pkg/domain"
	"sync"
)

var (
	lockImageCVEGetterMockCVES sync.RWMutex
)

// Ensure, that ImageCVEGetterMock does implement ImageCVEGetter.
// If this is not the case, regenerate this file with moq.
var _ ImageCVEGetter = &ImageCVEGetterMock{}

// ImageCVEGetterMock is a mock implementation of ImageCVEGetter.
//
//     func TestSomethingThatUsesImageCVEGetter(t *testing.T) {
//
//         // make and configure a mocked ImageCVEGetter
//         mockedImageCVEGetter := &ImageCVEGetterMock{
//             CVESFunc: func(org string, tag string) ([]domain.CVE, error) {
// 	               panic("mock out the CVES method")
//             },
//         }
//
//         // use mockedImageCVEGetter in code that requires ImageCVEGetter
//         // and then make assertions.
//
//     }
type ImageCVEGetterMock struct {
	// CVESFunc mocks the CVES method.
	CVESFunc func(org string, tag string) ([]domain.CVE, error)

	// calls tracks calls to the methods.
	calls struct {
		// CVES holds details about calls to the CVES method.
		CVES []struct {
			// Org is the org argument value.
			Org string
			// Tag is the tag argument value.
			Tag string
		}
	}
}

// CVES calls CVESFunc.
func (mock *ImageCVEGetterMock) CVES(org string, tag string) ([]domain.CVE, error) {
	if mock.CVESFunc == nil {
		panic("ImageCVEGetterMock.CVESFunc: method is nil but ImageCVEGetter.CVES was just called")
	}
	callInfo := struct {
		Org string
		Tag string
	}{
		Org: org,
		Tag: tag,
	}
	lockImageCVEGetterMockCVES.Lock()
	mock.calls.CVES = append(mock.calls.CVES, callInfo)
	lockImageCVEGetterMockCVES.Unlock()
	return mock.CVESFunc(org, tag)
}

// CVESCalls gets all the calls that were made to CVES.
// Check the length with:
//     len(mockedImageCVEGetter.CVESCalls())
func (mock *ImageCVEGetterMock) CVESCalls() []struct {
	Org string
	Tag string
} {
	var calls []struct {
		Org string
		Tag string
	}
	lockImageCVEGetterMockCVES.RLock()
	calls = mock.calls.CVES
	lockImageCVEGetterMockCVES.RUnlock()
	return calls
}
